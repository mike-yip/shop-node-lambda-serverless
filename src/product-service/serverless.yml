service: shop-node-lambda-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  environment:
    PRODUCTS_TABLE_NAME: products
    STOCKS_TABLE_NAME: stocks
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.PRODUCTS_TABLE_NAME}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.STOCKS_TABLE_NAME}
  httpApi:
    cors: true

plugins:
  - serverless-middleware
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ../../webpack.config.js
    includeModules:
      packagePath: '../../package.json'
  middleware:
    pre: 
      - ../middlewares/requestInterceptor.logRequest
    pos:
      - catch: ../middlewares/responseInterceptor.errorHandler

functions:
  getProductsList:
    handler: services/productsList.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  getProductsById:
    handler: services/productsById.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  createProduct:
    handler: services/createProduct.createProductApi
    events:
      - httpApi:
          path: /products
          method: post
