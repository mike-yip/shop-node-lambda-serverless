service: shop-node-lambda-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  environment:
    PRODUCTS_TABLE_NAME: products
    STOCKS_TABLE_NAME: stocks
    CREATE_PRODUCT_TOPIC_ARN: !Ref MyCreateProductTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.PRODUCTS_TABLE_NAME}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.STOCKS_TABLE_NAME}
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - ${self:provider.environment.CREATE_PRODUCT_TOPIC_ARN}
  httpApi:
    cors: true

plugins:
  - serverless-middleware
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ../../webpack.config.js
    includeModules:
      packagePath: '../../package.json'
  middleware:
    pre: 
      - ../middlewares/requestInterceptor.logRequest
  sqsQueueName: catalogItemsQueue
  sqsQueueArn: arn:aws:sqs:${aws:region}:${aws:accountId}:${self:custom.sqsQueueName}

functions:
  getProductsList:
    handler: services/productsList.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
    middleware:
      pos:
        - catch: ../middlewares/responseInterceptor.errorHandler
  getProductsById:
    handler: services/productsById.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
    middleware:
      pos:
        - catch: ../middlewares/responseInterceptor.errorHandler
  createProduct:
    handler: services/createProduct.createProductApi
    events:
      - httpApi:
          path: /products
          method: post
    middleware:
      pos:
        - catch: ../middlewares/responseInterceptor.errorHandler
  catalogBatchProcess:
    handler: services/catalogBatchProcess.catalogBatchProcessApi
    events:
      - sqs: 
          arn: ${self:custom.sqsQueueArn}
          batchSize: 5

resources:
  Resources:
    MyCatalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.sqsQueueName}
    MyCreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Create Product Topic'
        TopicName: createProductTopic
    MyCreateProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: mike_yip@epam.com
        Protocol: email
        TopicArn: ${self:provider.environment.CREATE_PRODUCT_TOPIC_ARN}
        FilterPolicy:
            random:
              - 0
    MyCreateProductTopicSubscription2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: epam-js-competency-center@mailinator.com
        Protocol: email
        TopicArn: ${self:provider.environment.CREATE_PRODUCT_TOPIC_ARN}
        FilterPolicy:
            random:
              - 1
  Outputs:
    CatalogItemsQueueUrl:
      Value: !Ref MyCatalogItemsQueue
    CatalogItemsQueueArn:
      Value: ${self:custom.sqsQueueArn}
